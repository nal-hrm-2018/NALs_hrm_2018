<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Service\ExtraAbsenceDateService;

/**
 * @property int $id
 * @property string $name
 * @property string $description
 * @property string $last_updated_at
 * @property int $last_updated_by_employee
 * @property string $created_at
 * @property int $created_by_employee
 * @property string $delete_flag
 * @property Employee[] $employees
 */
class Absence extends Model
{
    /**
     * @var array
     */

    public $table = 'absences';
    protected $fillable = [
        'id',
        'employee_id',
        'absence_type_id',
        'absence_status_id',
        'absence_time_id',
        'from_date',
        'to_date',
        'reason',
        'description',
        'is_deny',
        'is_late',
        'is_summary',
        'last_updated_at', 'last_updated_by_employee', 'created_at', 'created_by_employee', 'delete_flag'];

    //override method save
    public function save(array $options = [])
    {
        // trc khi update
        $rs = parent::save($options); // TODO: Change the autogenerated stub
        // sau khi update
        $IdAcceptStatus = getAbsenceStatuses(config('settings.status_common.absence.accepted'));
        $extraAbsenceDateService = app(ExtraAbsenceDateService::class);
        $currentYear = date('Y');
        if ($rs) {
            if (($this->absence_status_id == $IdAcceptStatus) && $this->is_late && ($currentYear > $this->from_date->format('Y'))) {
                $employee = $this->employee()->first();
                if (empty($employee)) {
                    return false;
                } else {
                    return $extraAbsenceDateService->update($employee->id, date_create($this->from_date)->format('Y'));
                }
            }
            if ($this->delete_flag == 1) {
                $employee = $this->employee()->first();
                if (empty($employee)) {
                    return false;
                } else {
                    for ($i = date_create($this->from_date)->format('Y'); $i <= date_create($this->to_date)->format('Y'); $i++) {
                        $extraAbsenceDateService->update($employee->id, $i);
                    }
                    return true;
                }
            }
        }
        return $rs;
    }

    public function employee()
    {
        return $this->belongsTo('App\Models\Employee', 'employee_id');
    }


    public function confirms()
    {
        return $this->hasMany('App\Models\Confirm')->where('delete_flag', '=', 0);
    }

    public function absenceStatus()
    {
        return $this->belongsTo('App\Models\AbsenceStatus', 'absence_status_id');
    }

    public function absenceType()
    {
        return $this->belongsTo('App\Models\AbsenceType', 'absence_type_id');
    }

    public function absenceTime()
    {
        return $this->belongsTo('App\Models\AbsenceTime', 'absence_time_id');
    }
}
